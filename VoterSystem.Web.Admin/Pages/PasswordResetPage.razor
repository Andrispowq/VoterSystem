@page "/reset-password"
@using VoterSystem.Shared.Blazor.Services
@using VoterSystem.Shared.Blazor.ViewModels
@using VoterSystem.Shared.Dto
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService

<h1 class="my-4">Reset Password</h1>

@if (string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Code))
{
    <div class="alert alert-danger">
        Invalid or missing reset token or email.
    </div>
    <button class="btn btn-outline-secondary" @onclick="LoginPage">
        <i class="bi bi-box-arrow-left me-1"></i> Back to Login
    </button>
}
else if (_done)
{
    <div class="alert alert-success">
        <i class="bi bi-check-circle me-1"></i>
        Password updated successfully. You can now log in.
    </div>
    <button class="btn btn-outline-primary" @onclick="LoginPage">
        <i class="bi bi-box-arrow-in-right me-1"></i> Go to Login
    </button>
}
else
{
    <EditForm Model="_model" OnValidSubmit="HandleReset">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">New Password</label>
            <InputText class="form-control" type="password" @bind-Value="_model.NewPassword" />
            <ValidationMessage For="@(() => _model.NewPassword)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Confirm Password</label>
            <InputText class="form-control" type="password" @bind-Value="_model.ConfirmPassword" />
            <ValidationMessage For="@(() => _model.ConfirmPassword)" />
        </div>

        <button type="submit" class="btn btn-success">
            <i class="bi bi-key-fill me-1"></i> Set New Password
        </button>
    </EditForm>
}

@code {
    [Parameter] [SupplyParameterFromQuery] public string? Email { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? Code { get; set; }

    private readonly UserPasswordResetViewModel _model = new();
    
    private bool _done;

    private async Task HandleReset()
    {
        if (!string.IsNullOrWhiteSpace(Email) && !string.IsNullOrWhiteSpace(Code))
        {
            var dto = new UserPasswordResetRequestDto
            {
                Email = Email,
                Token = Code,
                NewPassword = _model.NewPassword
            };
            
            var success = await AuthenticationService.ResetPasswordAsync(dto);
            _done = success;
        }
    }

    private async Task LoginPage()
    {
        NavigationManager.NavigateTo("/login");
        await Task.CompletedTask;
    }
}