@page "/register"
@using VoterSystem.Shared.Blazor.Services
@using VoterSystem.Shared.Blazor.ViewModels
@using VoterSystem.Web.Admin.Layout
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService

<div class="my-4 container">

    <h1>Register</h1>

    <MessageComponent Condition="@Offline"
                      ConditionText="Offline mode"
                      AlertMessage="Switch to online mode to register." />

    @if (!Offline)
    {
        <EditForm Model="_registerViewModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label" for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="_registerViewModel.Username" />
                <ValidationMessage For="@(() => _registerViewModel.Username)" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="_registerViewModel.Email" />
                <ValidationMessage For="@(() => _registerViewModel.Email)" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="password">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="_registerViewModel.Password" />
                <ValidationMessage For="@(() => _registerViewModel.Password)" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="confirm">Confirm Password</label>
                <InputText id="confirm" class="form-control" type="password" @bind-Value="_registerViewModel.ConfirmPassword" />
                <ValidationMessage For="@(() => _registerViewModel.ConfirmPassword)" />
            </div>

            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-person-plus me-1"></i> Register
                </button>
                <button type="button" class="btn btn-outline-secondary" @onclick="LoginPage">
                    <i class="bi bi-box-arrow-in-left me-1"></i> Back to Login
                </button>
            </div>
        </EditForm>
    }
</div>


@code {
    [Parameter] [SupplyParameterFromQuery] public bool Offline { get; set; }

    private readonly RegisterViewModel _registerViewModel = new();

    private async Task HandleRegister()
    {
        var result = await AuthenticationService.RegisterAsync(_registerViewModel);
        if (result)
        {
            await LoginPage();
        }
    }

    private async Task LoginPage()
    {
        NavigationManager.NavigateTo("/login");
        await Task.CompletedTask;
    }
}