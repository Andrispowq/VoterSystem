@page "/votings"
@using VoterSystem.Web.Admin.Layout
@using VoterSystem.Web.Admin.Services
@using VoterSystem.Web.Admin.ViewModels
@inject IVotingsService VotingsService

<div class="my-4 container">

    <h1>Votings</h1>

    <MessageComponent Condition="@Offline"
                      ConditionText="Offline mode"
                      AlertMessage="Switch to online mode to log in." />
    
    @if (ViewModel is null)
    {
        <p>Loading...</p>
    }
    else if (!ViewModel.Votings.Any())
    {
        <p>No votings found...</p>
    }
    else
    {
        <div class="my-4 container">
            <div class="g-4 row row-cols-md-5 row-cols-1">
                @foreach (var voting in ViewModel.Votings)
                {
                    <div class="col">
                        <!-- Card gets a green or red header depending on IsOngoing -->
                        <div class="h-100 card shadow-sm border-0">
                            <div class="card-header text-white @(voting.IsOngoing ? "bg-success" : "bg-danger")">
                                <div class="d-flex justify-content-between align-items-center">
                                    <strong>@voting.Name</strong>
                                    <span class="badge bg-light text-dark">
                                        @(voting.IsOngoing ? "Ongoing" : "Closed")
                                    </span>
                                </div>
                            </div>

                            <div class="card-body">
                                <!-- Dates -->
                                <p class="mb-1">
                                    <i class="bi bi-play-circle me-1"></i>
                                    From: @voting.StartsAt
                                </p>
                                <p class="mb-3">
                                    <i class="bi bi-stop-circle me-1"></i>
                                    Until: @voting.EndsAt
                                </p>

                                <!-- Choices -->
                                <ul class="list-group list-group-flush">
                                    @foreach (var choice in voting.VoteChoices)
                                    {
                                        <li class="list-group-item">
                                            <strong>@choice.Name</strong>
                                            @if (!string.IsNullOrWhiteSpace(choice.Description))
                                            {
                                                <span class="d-block text-muted small">@choice.Description</span>
                                            }
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public bool Offline { get; set; }
    
    private VotingsViewModel? ViewModel { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (Offline)
        {
            StateHasChanged();
            return;
        }

        ViewModel = await VotingsService.GetVotingsAsync();
        StateHasChanged();
    }

    private async Task EditVoting(long id)
    {
        //TODO
    }
}